#!/usr/bin/env python3
import sys
import subprocess
import importlib.util
import os
import platform

def check_python_version():
    """V√©rifie que Python 3.x est utilis√©"""
    if sys.version_info[0] < 3:
        print("‚ùå Python 3 est requis. Vous utilisez Python", sys.version.split()[0])
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")

def check_module(module_name):
    """V√©rifie si un module est install√©"""
    spec = importlib.util.find_spec(module_name)
    if spec is None:
        return False
    return True

def install_module(module_name):
    """Installe un module avec pip"""
    print(f"üì¶ Installation de {module_name}...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", module_name])

def check_and_install_dependencies():
    """V√©rifie et installe les d√©pendances n√©cessaires"""
    # Liste des modules requis
    required_modules = {
        "tkinter": "python3-tk",  # tkinter est sp√©cial, il s'installe diff√©remment
        "datetime": "datetime",
        "time": None,  # Module standard, pas besoin d'installer
    }
    
    missing_modules = []
    
    # V√©rifier chaque module
    for module, pip_name in required_modules.items():
        if not check_module(module):
            if pip_name:  # Si le module a un nom pip
                missing_modules.append((module, pip_name))
            else:
                print(f"‚ùå Module standard {module} non disponible. V√©rifiez votre installation Python.")
                sys.exit(1)
    
    # Installer les modules manquants
    if missing_modules:
        print("Modules manquants d√©tect√©s. Installation en cours...")
        
        # Cas sp√©cial pour tkinter sur diff√©rents syst√®mes
        if any(module == "tkinter" for module, _ in missing_modules):
            system = platform.system().lower()
            if system == "linux":
                # Sur Linux, tkinter s'installe via le gestionnaire de paquets
                if os.path.exists("/usr/bin/apt"):
                    print("üì¶ Installation de tkinter via apt...")
                    subprocess.check_call(["sudo", "apt", "update"])
                    subprocess.check_call(["sudo", "apt", "install", "-y", "python3-tk"])
                elif os.path.exists("/usr/bin/dnf"):
                    print("üì¶ Installation de tkinter via dnf...")
                    subprocess.check_call(["sudo", "dnf", "install", "-y", "python3-tkinter"])
                else:
                    print("‚ùå Impossible d'installer tkinter automatiquement. Veuillez l'installer manuellement.")
                    sys.exit(1)
            elif system == "darwin":  # macOS
                print("‚ùå Sur macOS, tkinter devrait √™tre inclus avec Python. V√©rifiez votre installation Python.")
                sys.exit(1)
            elif system == "windows":
                print("‚ùå Sur Windows, tkinter devrait √™tre inclus avec Python. V√©rifiez votre installation Python.")
                sys.exit(1)
        
        # Installer les autres modules via pip
        for module, pip_name in missing_modules:
            if module != "tkinter":  # tkinter est trait√© s√©par√©ment
                install_module(pip_name)
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")

def run_application():
    """Lance l'application principale"""
    print("üöÄ Lancement de l'application Solary...")
    
    # V√©rifier si main.py existe
    if not os.path.exists("main.py"):
        print("‚ùå Fichier main.py introuvable. V√©rifiez que vous √™tes dans le bon r√©pertoire.")
        sys.exit(1)
    
    # Lancer l'application
    subprocess.call([sys.executable, "main.py"])

def main():
    """Fonction principale"""
    print("üîç V√©rification de l'environnement pour Solary...")
    
    # V√©rifier la version de Python
    check_python_version()
    
    # V√©rifier et installer les d√©pendances
    check_and_install_dependencies()
    
    # Lancer l'application
    run_application()

if __name__ == "__main__":
    main()